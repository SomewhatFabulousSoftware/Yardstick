url: https://helpx.adobe.com/adobe-character-animator/release-notes.html
urlredirects: false
preDownloadScript: |
  using module .\Modules\Custom\AdobeDownloader.psm1
  $Script:CharacterAnimator = [AdobeApplication]::new(@{
    Name = "Character Animator"
    ID = "CharacterAnimator_SDL"
    URL = $URL
    VersionMatchStringRegex = '(?<=[Vv]ersion )(\.{0,1}[0-9]{1,4}){2,4}'
    PackageName = "Auto_CharacterAnimator_<Version>_SD_NAU"
    InstallType = "ManagedSDL"
  })

  $CharacterAnimator.Update()
  $Version = $CharacterAnimator.Version
  $PackageName = $CharacterAnimator.PackageName
  $InstallScript = $CharacterAnimator.InstallScript
  $UninstallScript = $CharacterAnimator.UninstallScript
downloadScript: |
  $Script:CharacterAnimator.Download()
filename: setup.exe
iconFile: CharacterAnimator.png
id: CharacterAnimator_SDL
displayName: Adobe Character Animator (Shared Device License)
publisher: Adobe
description: Licensed for lab use only. Individuals should download the non-shared device license installer. Adobe Character Animator is a character animation application that allows you to bring expressive characters to life using your own artwork. It is a unique and powerful application for intuitive 2D character animation.
detectionType: script
detectionScript: |
  $Version = "<version>"
  $NewestVersionPath = ((Get-ChildItem "C:\Program Files\Adobe\Adobe Character Animator*" | Sort-Object Name -Descending)[0]).FullName
  $InstalledFileName = "Character Animator.exe"
  $VersionComponents = (Get-Item "$NewestVersionPath\Support Files\$InstalledFileName").VersionInfo.FileVersionRaw
  $VersionSegments = $Version.split(".").count
  Switch($VersionSegments) {
    1 {$FileVersion = "$($VersionComponents.Major)"; Break}
    2 {$FileVersion = "$($VersionComponents.Major).$($VersionComponents.Minor)"; Break}
    3 {$FileVersion = "$($VersionComponents.Major).$($VersionComponents.Minor).$($VersionComponents.Build)"; Break}
    default {$FileVersion = "$($VersionComponents.Major).$($VersionComponents.Minor).$($VersionComponents.Build).$($VersionComponents.Revision)"}
  }
  if ($FileVersion -eq $Version) {
    Write-Host "Product has installed correctly"
    exit 0
  }
  Write-Host "Product has failed to install correctly"
  exit 1
installExperience: system
restartBehavior: suppress
minOSVersion: W10_20H2
scopeTags:
  - scopeTag2